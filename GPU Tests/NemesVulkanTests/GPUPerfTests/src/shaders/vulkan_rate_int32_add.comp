// Copyright (c) 2021 - 2022, Nemes <nemes@nemez.net>
// SPDX-License-Identifier: MIT
// 
// MIT License
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software andassociated documentation files(the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, andto permit persons to whom the Software is
// furnished to do so, subject to the following conditions :
// 
// The above copyright notice andthis permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 450

#extension GL_EXT_shader_explicit_arithmetic_types : require
#extension GL_EXT_shader_explicit_arithmetic_types_int32 : require

#define WORKGROUP_SIZE	256

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, std430) readonly buffer DummyInputBuffer {
	i32vec4 data[];
} dummy_inputs;

layout(set = 0, binding = 1, std430) writeonly buffer DummyOutputBuffer {
	i32vec4 data[];
} dummy_outputs;

layout(set = 0, binding = 2) readonly uniform UniformBuffer {
	uint32_t loop_count;
} uniform_buffer;

void main() {
	uint32_t thread_index = gl_LocalInvocationIndex * 4;
	i32vec4 acc0 = dummy_inputs.data[thread_index];
	i32vec4 acc1 = dummy_inputs.data[thread_index + 1];
	i32vec4 acc2 = dummy_inputs.data[thread_index + 2];
	i32vec4 acc3 = dummy_inputs.data[thread_index + 3];
	
	for (uint32_t i = 0; i < uniform_buffer.loop_count; i++) {
		uint32_t offset = i & (WORKGROUP_SIZE - 1);
		i32vec4 val = dummy_inputs.data[offset];
		acc0 = acc0 + val;
		acc1 = acc1 + val;
		acc2 = acc2 + val;
		acc3 = acc3 + val;
	}

	dummy_outputs.data[thread_index] = acc0;
	dummy_outputs.data[thread_index + 1] = acc1;
	dummy_outputs.data[thread_index + 2] = acc2;
	dummy_outputs.data[thread_index + 3] = acc3;
}