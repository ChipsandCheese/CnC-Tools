// Copyright (c) 2021 - 2022, Nemes <nemes@nemez.net>
// SPDX-License-Identifier: MIT
// 
// MIT License
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software andassociated documentation files(the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, andto permit persons to whom the Software is
// furnished to do so, subject to the following conditions :
// 
// The above copyright notice andthis permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 450

#extension GL_EXT_shader_explicit_arithmetic_types : require

#define WORKGROUP_SIZE	256

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform sampler2D InputSampler;

layout(set = 0, binding = 1, std430) buffer OutputBuffer {
	vec4 outputs[];
} output_buffer;

layout(set = 0, binding = 2) readonly uniform UniformBuffer {
	uint32_t loop_count;
	uint32_t region_size;
	uint32_t skip_amount;
	uint32_t region_width;
	uint32_t region_height;
} uniform_buffer;

void main() {
	uint32_t workgroup_index = gl_WorkGroupID.z * gl_NumWorkGroups.x * gl_NumWorkGroups.y + gl_WorkGroupID.y * gl_NumWorkGroups.x + gl_WorkGroupID.x;
	uint32_t workgroup_offset = (workgroup_index * uniform_buffer.skip_amount) % uniform_buffer.region_size;
	uint32_t workgroup_offset_x = workgroup_offset % uniform_buffer.region_width;
	uint32_t workgroup_offset_y = (workgroup_offset / uniform_buffer.region_width) % uniform_buffer.region_height;
	uint32_t thread_index = gl_LocalInvocationIndex;
	vec4 acc1 = vec4(1.0);
	vec4 acc2 = vec4(2.0);
	vec2 reciprocal_size = vec2(1.0) / vec2(textureSize(InputSampler, 0).xy);
	vec2 center_offset = reciprocal_size * 0.5;

	for (uint32_t i = 0; i < uniform_buffer.loop_count; i++) {
		acc1 *= texture(InputSampler, vec2(workgroup_offset_x + thread_index, workgroup_offset_y) * reciprocal_size + center_offset);
		workgroup_offset_x += WORKGROUP_SIZE;
		workgroup_offset_x = (workgroup_offset_x == uniform_buffer.region_width) ?  0 : workgroup_offset_x;
		acc2 *= texture(InputSampler, vec2(workgroup_offset_x + thread_index, workgroup_offset_y) * reciprocal_size + center_offset);
		workgroup_offset_x += WORKGROUP_SIZE;
		workgroup_offset_x = (workgroup_offset_x == uniform_buffer.region_width) ?  0 : workgroup_offset_x;
		acc1 *= texture(InputSampler, vec2(workgroup_offset_x + thread_index, workgroup_offset_y) * reciprocal_size + center_offset);
		workgroup_offset_x += WORKGROUP_SIZE;
		workgroup_offset_x = (workgroup_offset_x == uniform_buffer.region_width) ?  0 : workgroup_offset_x;
		acc2 *= texture(InputSampler, vec2(workgroup_offset_x + thread_index, workgroup_offset_y) * reciprocal_size + center_offset);
		workgroup_offset_x += WORKGROUP_SIZE;

		if (workgroup_offset_x == uniform_buffer.region_width) {
			workgroup_offset_x = 0;
			workgroup_offset_y += 1;
			if (workgroup_offset_y == uniform_buffer.region_height) {
				workgroup_offset_y = 0;
			}
		}
	}

	output_buffer.outputs[thread_index] = acc1 * acc2;
}